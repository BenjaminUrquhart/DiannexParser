package net.benjaminurquhart.diannex;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.benjaminurquhart.diannex.runtime.ExternalDNXFunction;

public class TSUSActorStubs {
	
	public static boolean AUTODEF_ACTORS = true;
	
	public static Actor boundActor;
	
	private static List<Actor> actors = new ArrayList<>();
	
	private static Actor findOrCreateActor(String name) {
		Actor out = null;
		int index = -1;
		if(name.matches("\\d+")) {
			index = Integer.parseInt(name);
			if(index < actors.size()) {
				out = actors.get(index);
			}
		}
		else {
			for(Actor actor : actors) {
				if(actor != null && actor.getName().equals(name)) {
					out = actor;
					break;
				}
			}
		}
		if(out == null) {
			if(AUTODEF_ACTORS) {
				if(index >= 0) {
					name = "AUTOGENERATED_" + index;
				}
				out = new Actor(name, 0, 0);
				if(index < 0) {
					actors.add(out);
				}
				else {
					while(actors.size() < index) {
						actors.add(null);
					}
					actors.set(index, out);
				}
			}
			else {
				throw new IllegalArgumentException("No actors found for '" + name + "'");
			}
		}
		return out;
	}
	
	@ExternalDNXFunction("createObject")
	public static Actor createNewActor(String name, int x, int y) {
		Actor out = new Actor(name, x, y);
		actors.add(out);
		return out;
	}
	
	@ExternalDNXFunction("actorBind")
	public static void setActiveActor(Object obj) {
		if(obj instanceof Actor) {
			boundActor = (Actor)obj;
		}
		else {
			findOrCreateActor(String.valueOf(obj));
		}
	}
	
	@ExternalDNXFunction("actorSprite")
	public static void setActorSprite(String sprite) {
		boundActor.setVar("sprite_index", sprite);
	}
	
	public static class Actor {
		
		private String name;
		private Map<String, Object> vars;
		
		public Actor(String name, int x, int y) {
			vars = new HashMap<>();
			this.name = name;
			vars.put("x", x);
			vars.put("y", y);
		}
		
		public String getName() {
			return name;
		}
		
		public void setVar(String name, Object val) {
			vars.put(name, val);
		}
		
		public Object getVar(String name) {
			return vars.get(name);
		}
		
		@Override
		public String toString() {
			return String.format("Actor %s (%s)", name, vars);
		}
	}
}
